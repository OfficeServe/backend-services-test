server {
  http {
    host = "0.0.0.0"
    port = ${?container_port}
  }
}

report {
  ttl {
    pendingMessage = ${?REPORT_TTL_PENDINGMESSAGE}      // Maximum time needed for computing a message. This should be >= SQS In flight time
    processedMessage = ${?REPORT_TTL_PROCESSEDMESSAGE}  // Duplicate messages timeframe. Receiving the same message at any time longer than that will be considered as a new message
  }
  document {
    invoice {
      email {
        from = ${?REPORT_DOCUMENT_INVOICE_EMAIL_FROM}
        bcc = ${?REPORT_DOCUMENT_INVOICE_EMAIL_BCC}
        subject = ${?REPORT_DOCUMENT_INVOICE_EMAIL_SUBJECT}
      }
    }
    receipt {
      email {
        from = ${?REPORT_DOCUMENT_RECEIPT_EMAIL_FROM}
        bcc = ${?REPORT_DOCUMENT_RECEIPT_EMAIL_BCC}
        subject = ${?REPORT_DOCUMENT_RECEIPT_EMAIL_SUBJECT}
      }
    }
    cancellation {
      email {
        from = ${?REPORT_DOCUMENT_CANCELLATION_EMAIL_FROM}
        bcc = ${?REPORT_DOCUMENT_CANCELLATION_EMAIL_BCC}
        subject = ${?REPORT_DOCUMENT_CANCELLATION_EMAIL_SUBJECT}
      }
    }
    deliveryNote {
      email {
        from = ${?REPORT_DOCUMENT_DELIVERYNOTE_EMAIL_FROM}
        to = ${?REPORT_DOCUMENT_DELIVERYNOTE_EMAIL_TO}
        bcc = ${?REPORT_DOCUMENT_DELIVERYNOTE_EMAIL_BCC}
        subject = ${?REPORT_DOCUMENT_DELIVERYNOTE_EMAIL_SUBJECT}
        defaultBody = ${?REPORT_DOCUMENT_DELIVERYNOTE_EMAIL_DEFAULTBODY}
      }
    }
  }
}
aws {
  sqs {
    queueUrl = ${?AWS_SQS_QUEUEURL}
    maxMessages = ${?AWS_SQS_MAXMESSAGES} // Max number of messages read from SQS. The upper limit is 10
    fetchingInterval = ${?AWS_SQS_FETCHINGINTERVAL}
    sendMessageTimeout = ${?AWS_SQS_SENDMESSAGETIMEOUT}
  }
  redis {
    host = ${?AWS_REDIS_HOST}
    port = ${?AWS_REDIS_PORT}
  }
  sns {
    endpoint = ${?AWS_SNS_ENDPOINT}
    topicArn {
      email = ${?AWS_SNS_TOPICARN_EMAIL}
    }
  }
}
document-service-api {
  baseUrl = ${?DOCUMENT-SERVICE-API_BASEURL}
}

logger-startup-timeout = 30s